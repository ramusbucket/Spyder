@using EMS.Web.Website.Models
@model SessionsWithDetailsViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="help-block"></div>

<div class="row" id="sessions-container">

    @if (this.Model.Message != null)
    {
        <h1 class="text-danger">@this.Model.Message</h1>
    }

    @foreach (var vm in this.Model.Sessions)
    {
        <div class="col-lg-4" data-session-id="@vm.SessionId">
            <h1>
                <a href="/MonitoringSessions/Details/@vm.SessionId">@vm.UserName</a>
            </h1>

            <div class="row">
                <h5>Camera</h5>
                <ul class="list-inline" id="@($"camera-{vm.SessionId}")">
                    @foreach (var cameraSnapshot in vm.CameraSnapshots)
                    {
                        <li class="margins-none">
                            <img src="@Html.Image(cameraSnapshot.CameraSnapshot)" class="snapshot-small" />
                        </li>
                    }
                </ul>
            </div>

            <div class="row">
                <h5>Display</h5>
                <ul class="list-inline" id="@($"display-{vm.SessionId}")">
                    @foreach (var displaySnapshot in vm.DisplaySnapshots)
                    {
                        <li class="margins-none">
                            <img src="@Html.Image(displaySnapshot.DisplaySnapshot)" class="snapshot-small" />
                        </li>
                    }
                </ul>
            </div>

            <div class="row">
                <h5>Pressed keys</h5>
                <ul class="list-inline" id="@($"keyboard-{vm.SessionId}")">
                    @foreach (var keyboardKey in vm.KeyboardKeys)
                    {
                        <li>
                            <span>@keyboardKey.KeyboardKey</span>
                        </li>
                    }
                </ul>
            </div>

            <div class="row ">
                <h5>Foreground processes</h5>
                <ul class="list-inline" id="@($"foreground-processes-{vm.SessionId}")">
                    @foreach (var foregroundProcess in vm.ForegroundProcesses)
                    {
                        <li>
                            <span>
                                @foregroundProcess.ForegroundProcess.ProcessName
                            </span>
                        </li>
                    }
                </ul>
            </div>

            <div class="row ">
                <h5>Activated processes</h5>
                <ul class="list-inline" id="@($"active-processes-{vm.SessionId}")">
                    @foreach (var activeProcess in vm.ActiveProcesses)
                    {
                        <li>
                            <span>
                                @activeProcess.ActiveProcess.ProcessName
                            </span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->

    <script>
        var url = "/MonitoringSessions/GetActiveSessionsWithDetails?page=1&itemsPerPage=6";
        var $sessionsContainer = $('#sessions-container');

        $(function() {
            // Reference the auto-generated proxy for the hub.
            var hub = $.connection.pushNotificationsHub;
            // Create a function that the hub can call back to display messages.
            hub.client.pushForegroundProcess = function(foregroundProcess) {
                console.log(foregroundProcess);
            };

            hub.client.pushKeyboardKeys = function(keyboardKeys) {
                console.log(keyboardKeys);
            };

            hub.client.pushCameraSnapshot = function(cameraSnapshot) {
                if (!cameraSnapshot.CameraSnapshot) {
                    console.log("Not a camera snapshot");
                    return;
                }

                var sessionId = cameraSnapshot.SessionId;
                var userName = cameraSnapshot.UserName;

                var $session = $(`#sessions-container [data-session-id=${sessionId}]`);
                if (!$session) {
                    console.log("No session div");

                    var $session = $(`<div class="col-lg-4" data-session-id="${sessionId}"></div>`)
                        .prependTo($sessionsContainer);
                    var $header = $(`<h1><a href="/MonitoringSessions/Details/${sessionId}">${userName}</a></h1>`)
                        .appendTo($session);
                    var $cameraSnapshotsContainer =
                        $(`<div class="row"><h5>Camera</h5><ul class="list-inline" id="camera-${sessionId
                                }"></ul></div>`)
                            .appendTo($session);
                }

                // if li's are 3, remove last and prepend to ul
                var ulSelector = `#camera-${sessionId}`;

                if ($(`${ulSelector} li`).length >= 3) {
                    $(ulSelector + " li:last").remove();
                }

                var $ul = $(ulSelector);
                var $li = $('<li/>').prependTo($ul);
                var $img = $("<img/>")
                    .addClass("snapshot-small")
                    .attr("src", `/Images/GetCameraSnapshot?cameraSnapshotId=${cameraSnapshot.Id}`)
                    .appendTo($li);
            };

            hub.client.pushDisplaySnapshot = function(displaySnapshot) {
                console.log(displaySnapshot);
            };

            hub.client.pushActiveProcess = function(activeProcess) {
                console.log(activeProcess);
            };

            // Start the connection.
            $.connection.hub.start().done(function() {
                console.log("Connected!");
            });
        });

        // Establish SignalR connection
        // Create handlers for 5 different types of push notifications
        // Update UI (remove last index, insert at first index)

        //$.get(url, function (response) {
        //    if (response.IsSuccessful) {
        //        activeSessions = response.Result;
        //        var activeSessionsCount = activeSessions.length;

        //        console.log(activeSessions);
        //    } else {
        //        console.log(response.Message);
        //    }
        //});
    </script>
}


